#summary Specifies the file format for battle maps

= Introduction =

Here is the file format for battle maps as discussed on googlegroups. Map files are loaded by both server for battle engine info and client for displaying the map. It has not yet been decided whether the map file is a plain text file which is then parsed, or just python. A python format is obviously much easier, but becomes a security issue.

If we are clever, we can probably make battle and world maps one and the same (some of us would also like town maps which would definitely make sense to have the same as a battle map). This remains to be discussed though.


= Details =

The two most important elements of the map file are the *Tile* and *Material*. Between the two of these, complex map structures can be specified. A map consists of multiple entries of Tiles which make up a grid of arbitrary size. Right now there are no constraints upon how these Tiles can be arranged, so a map does not necessarily have to be square or rectangular, or even contiguous. It is up to the designer of the map to make sure that the map is valid for game play.

The advantage of this model, however, is that map geometry can be specified in any location at any height contiguous or not. This allows for great flexibility in designing terrain.

== General Properties ==

Maps may have a number of 'global' properties which serve as meta-data. Global refers to the fact that they do not belong to a Material or Tile.

   * _version_ - Integer
   Specifies the map file format version. The rationale is if we were to make changes in the battle engine that caused loading or gameplay problems in older maps, we would bump the required version in the software (and reform the new map file format appropriately) and thus we could refuse to load older maps which may cause crashes, etc.. This is a serial integer from 1 to n.

== Material ==

A Material governs the overall graphical representation of a tile to which it is assigned. Several Materials may be defined and then used by many Tiles. The key properties of a Material are as follows:

  * _type_ - String
  This is a name for a Material so that it can be referenced by Tiles.
  * _is_terrain_ - Boolean
  This specifies whether the Material should be one that is considered part of the terrain or an object. This is important because terrain needs to be procedurally adjusted to line up with the heights of its neighbors.
  * _graphic_ - Multiple
  This is the most complex property of a Material as it can be several things. For a terrain tile it will be a list of texture names in the following order: top, west, east, north, south. Objects that are sprites may follow the same pattern, but at a minimum need a top and a side. If there is only one name given, it is assumed to be a model to load and display.
  * _color_ - List of Floats
  These are the RGBA values that are used to color the Material. They range from 0 to 1.0.
  * _variation_ - List of Floats
  RGBA to apply color variation. They range from 0 to 1.0.
  * _blocking_ - Boolean
  Specifies whether this tile can be entered by characters or not.
  * _hitpoints_ - Integer
  This is the maximum hitpoints that controls the amount of damage that a Material can take. If it is terrain, damage to the terrain is interpreted as height changes. For objects, this controls how much damage the object can take before being destroyed or having some other negative effect applied to it. Zero hitpoints makes the Material invulnerable.
  * _resistances_ - Dictionary
  Specifies how well this Material fares from different types of damage. This is not fully worked out and should probably be integrated into our general method of handling resistances (which is still under development).

See below for examples.

== Tile ==

A Tile is the element of the map that defines where a piece of terrain or an object is located and what material it has. The material determines what kind of entity it is (terrain or object). Tiles have the following properties:

   * _x_ - Integer
   Location of the Tile on the x-axis.
   * _y_ - Integer
   Location of the Tile on the y-axis.
   * _type_ - String
   Specifies the Material that this Tile uses. This refers to every height chunk specified.
   * _heights_ - List of Integer pairs
   These are pairs of heights that specify "chunks" of terrain or "height chunks". This chunk will run from the first value (h1) at its base to the second value (h2) at its top. A pair with the same height (h1 == h2) will have zero thickness. A situation where h1 > h2 is undefined and any attempt to load such a map should issue a warning and continue as if h1 == h2. For objects, the second value does not apply.
   * _cliff_ - Boolean
   Tells the procedural tile system that vertices should not be matched with neighboring tiles of differing heights and a side or "cliff face" should be rendered instead. A cliff may also have yet to be determined effects on gameplay.

See below for examples.

= Map Example =

The following is a simple 2x2 map with a tree in the top left corner tile and a chunk mysteriously floating in the bottom right corner tile.

{{{
version = 1

Material   # grass with dirt sides
type = "Grass"
is_terrain = True
graphic = (grass_top, dirt_west, dirt_east, dirt_north, dirt_south)
color = (1, 1, 1, 1)
variation = (0, 0, 0, 0)
blocking = False
resistances = {"fire":1}  # resistant against fire, but.. TODO
hitpoints = 0   # this grass is invulnerable

Material
type = "Tree"
is_terrain = False
graphic = "tree.mdl"
color = (1, 1, 1, 1)
variation = (0, 0, 0, 0)
blocking = True
resistances = {"water":1}
hitpoints = 50

# grid
(x=0, y=0, type="Grass", heights=((0,4)), cliff=False)
(x=0, y=1, type="Grass", heights=((0,4)), cliff=False)
(x=1, y=0, type="Grass", heights=((0,4)), cliff=False)
(x=1, y=1, type="Grass", heights=((0,4),(8,10)), cliff=False) # tile with floating chunk
(x=0, y=0, type="Tree", heights=((4,4)), cliff=False)
}}}