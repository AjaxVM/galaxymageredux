#summary This document is intended to describe how the game will work so we always have a goal in the specific programming goals.
#labels Phase-Design

=Game design=

This document is intended to describe how the game will work so we always have a goal in the specific programming goals.

==Game Objects==
There will always be two instances of a game objects - the Server one and the Client one.
They can (should?) be the same .py file in the end (each unit is stored as a separate Python file, like wesnoth wml unit files and such).
The server one will hold all logic, and the client will only allow accessing of the data, but not direct manipulation.
Instead, to update the client will call methods on the server (using twisted's PB framework), the server will check to ensure it is that players turn, and then allow the request.
The Server will then update all clients when something changes and they will update their display.

===A simple example===
Server has 2 players joined. It is player one's turn. Server sends data to both clients informing them of this.
Player 2 tries to end turn by calling server.EndTurn, server rejects as it is not their turn.
Player 1 tries to end turn with same request and it passes.
Server now informs all clients that it is player two's turn.


==Networking==
I am trying to figure out how to do the server, but I think for now all games will simply run from the main server (maybe we can run a few "main" servers later), with an option to start/join a custom one.
When you join a server you can join a new game where you go to the player setup screen from that game. From then on all requests to the server will be funneled in to the server's GameInstance objects for each game.

Then we have the issue of AI. I very strongly think the AI should be a client of it's own - even if we want the server to spawn it. I believe that will make it easier to make the ai anyways, as we already have the interface there for it to do it's stuff with the server, also we avoid a potential speed drop if the AI is run on the server, as the server blocks (ie, the clients can't do a thing until the AI stops thinking!)...


==Player Setup Screen==
Each player get's to pick their faction, as well as their Commander unit. If it is an AI player they will automatically pick their force.
Players then get a certain number of points to pick an army of units, based on the game settings. Once everyone has their units and hit ready the "host" player can start the game.
When the game starts players each get a set number of reinforcement tiles - so long as they have extra units and one of their reinforcement tiles is open they can place one of their extra units there.
When placed units cannot move that turn, and possibly get a defense decreaser.
A player has lost if he has no units on the board and either he no units left in reserve or he has no open reinforcement points. He has still lost if at a later time reinforcement points  "open" up and he still has extra units.