Make a camera class with a real position (we may want to do some stuff with that later) that looks at a tile we are on.
Camera should be able to interpolate to a position cleanly/quickly.
Perhaps do a simple camera that just points at something and moves away - no math needed just works easily, we can do fancier stuff at a later point!

Set up 3d engine to hold a flat map with various tiles (tilemap) - can only have one tile map (so everything can go in a Buffer)

Camera should have min/max values, don't zoom too close/far, go under map etc.

engine.Entities - like PointSprite.
Entities should contain data and methods to render it,
but no attributes of their own (like pos and stuff)




Stuff to be converted...

gfx_engine.py:

Convert map engine to flat 2d (not isometric)
Map/Tile are going to need to be specific classes to be extended later
	to say add smooth ramps and stuff as map progresses...
Add Entity class - which can contain a renderable object and attributes.
Inside Entity will be color (for flags), position etc.
Define map contant objects - Tile, Entity, etc.
Contant objects are all that can be added to map by mod
Make sure entities can be defined with images that have no path, ie
	images should be stored as name only, no path!



client_states.py:

MidGameLeave and GameEngine states need to be update


Remove GIFImage.py from lib  (engine has it's own)


in_game.py:

Update GUI



Scenario - CaughtByTheEnemy

map.py: update camera to be 3d
scenario's need to set team colors themselves - flags will use these